-------------------------------------------------
CHAPTER 4 - SYMPY
-------------------------------------------------

- Creating Symbols

    >>> from sympy import Symbol

    >>> x = Symbol('x')
    >>> x
    x

    >>> x + x + 1
    2*x + 1

    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> z = Symbol('z')

    >>> from sympy import symbols
    >>> x,y,z = symbols('x,y,z')



- Basic Symbol Operations

    >>> from sympy import Symbol
    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> z = Symbol('z')

    # Expression automatically simplified
    >>> s = x*y + x*y
    >>> s
    2*x*y

    # Expression automatically simplified
    >>> p = x*(x + x)
    >>> p
    2*x**2

    # Note that Python only simplifies the most basic of expressions
    >>> p = (x+2)*(x+3)
    >>> p
    (x+2)*(x+3)



- Factoring and Expanding Expressions

    >>> from sympy import Symbol, factor, expand
    >>> x = Symbol('x')
    >>> y = Symbol('y')

    # Factor an expression
    >>> expr = x**2 - y**2
    >>> factor(expr)
    (x-y)*(x+y)

    # Expand an expression
    >>> factors = factor(expr)
    >>> expand(factors)
    x**2 - y**2


    # Factor a cube
    >>> expr = x**3 + 3*x**2*y + 3*x*y**2 + y**3
    >>> factors = factor(expr)
    >>> factors
    (x+y)**3

    >>> expand(factors)
    x**3 + 3*x**2*y + 3*x*y**2 + y**3


    # If expression cannot be simplified, it is returned unchanged
    >>> expr = x + y + x*y
    >>> factor(expr)
    x + y + x*y



- Pretty-Printing Exponential Expressions

    >>> from sympy import pprint
    >>> pprint(expr)
    (Expression with exponents superscripted and terms in order)



- Printing a Series

    Up to a number n, print the series:

      x + x**2 + x**3 + ... + x**n
          ----   ----         ----
            2      3            n


    from sympy import Symbol, pprint, init_printing

    def print_series(n):
        init_printing(order='rev-lex')
        x = Symbol('x')
        series = x
        for i in range(2, n+1):
            series = series + (x**i)/i
        pprint(series)



- Substituting in Values

    # Substituting values into variables
    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> expr = x*x + x*y + x*y + y*y
    >>> result = expr.subs({x:1, y:2})
    >>> result
    9

    # Express symbol in terms of another symbol
    >>> from sympy import simplify
    >>> expr_subs = expr.subs({x:1-y})
    >>> expr_subs
    y**2 + 2*y*(-y+1) + (-y+1)**2

    >>> simplify(expr_subs)
    1



- Converting Strings to Mathematical Expressions

    >>> from sympy import sympify
    >>> expr = 'x**2 + 3*x + x**3 + 2*x'
    >>> expr = sympfiy(expr)



- Handling sympify() Errors

    >>> from sympy import sympify
    >>> from sympy.core.sympify import SympifyError
    >>> expr = 'x**2 + 3*x + x**3 + 2x'

    >>> try:
            expr = sympify(expr)
        except SympifyError:
            print('Invalid input')



- Example - Product of 2 Expressions

    from sympy import expand, sympify
    from sympy.core.sympify import SympifyError


    def product(expr1, expr2):
        prod = expand(expr1*expr2)
        print(prod)


    if __name__ == '__main__':
        expr1 = input('Enter the first expression: ')
        expr2 = input('Enter the second expression: ')

        try:
            expr1 = sympify(expr1)
            expr2 = sympify(expr2)
        except SympifyError:
            print('Invalid input')
        else:
            product(expr1, expr2)



- Solving Equations

    # Sets equation to zero and solves for variable
    >>> from sympy import Symbol, solve
    >>> x = Symbol('x')

    >>> expr = x - 5 - 7
    >>> solve(expr)
    [12]



- Solving Quadratic Equations

    # 2 Real Roots
    >>> x = Symbol('x
    >>> expr = x**2 + 5*x + 4
    >>> solve(expr)
    [-4, -1]

    >>> solve(expr, dict=True)
    [{x: -4}, {x: -1}]


    # 2 Complex Roots
    >>> expr = x**2 + x + 1
    >>> solve(expr, dict=True)
    [{x: -1/2 - sqrt(3)*I/2}, {x: -1/2 + sqrt(3)*I/2}]



- Solving For One Variable In Terms of Others

    >>> x = Symbol('x')
    >>> a = Symbol('a')
    >>> b = Symbol('b')
    >>> c = Symbol('c')

    >>> expr = a*x*x + b*x + c
    >>> solve(expr, x, dict=True)
    [{x: (-b + sqrt(-4*a*c + b**2))/(2*a)}, {x: -(b + sqrt(-4*a*c + b**2))/(2*a)}]



- Example - Distance Traveled At Constant Acceleration

    The distance traveled by a body moving with
      a = constant acceleration
      u = initial velocity
      t = time

    is given by
      s = ut + (1/2)*(a)*(t**2)


    >>> from sympy import Symbol, solve, pprint
    >>> s = Symbol('s')
    >>> u = Symbol('u')
    >>> t = Symbol('t')
    >>> a = Symbol('a')

    >>> expr = u*t + (1/2)*a*t*t - s
    >>> t_expr = solve(expr, t, dict=True)
    >>> pprint(t_expr)



- Solving a System of Linear Equations

    We want to solve the system of equations:
      2x + 3y = 6
      3x + 2y = 12


    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> expr1 = 2*x + 3*y - 6
    >>> expr2 = 3*x +2*y - 12

    >>> solve((expr1, expr2), dict=True)
    [{y: -6/5, x: 24/5}]