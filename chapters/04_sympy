-------------------------------------------------
CHAPTER 4 - SYMPY
-------------------------------------------------

- Creating Symbols

    >>> from sympy import Symbol

    >>> x = Symbol('x')
    >>> x
    x

    >>> x + x + 1
    2*x + 1

    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> z = Symbol('z')

    >>> from sympy import symbols
    >>> x,y,z = symbols('x,y,z')



- Basic Symbol Operations

    >>> from sympy import Symbol
    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> z = Symbol('z')

    # Expression automatically simplified
    >>> s = x*y + x*y
    >>> s
    2*x*y

    # Expression automatically simplified
    >>> p = x*(x + x)
    >>> p
    2*x**2

    # Note that Python only simplifies the most basic of expressions
    >>> p = (x+2)*(x+3)
    >>> p
    (x+2)*(x+3)



- Factoring and Expanding Expressions

    >>> from sympy import Symbol, factor, expand
    >>> x = Symbol('x')
    >>> y = Symbol('y')

    # Factor an expression
    >>> expr = x**2 - y**2
    >>> factor(expr)
    (x-y)*(x+y)

    # Expand an expression
    >>> factors = factor(expr)
    >>> expand(factors)
    x**2 - y**2


    # Factor a cube
    >>> expr = x**3 + 3*x**2*y + 3*x*y**2 + y**3
    >>> factors = factor(expr)
    >>> factors
    (x+y)**3

    >>> expand(factors)
    x**3 + 3*x**2*y + 3*x*y**2 + y**3


    # If expression cannot be simplified, it is returned unchanged
    >>> expr = x + y + x*y
    >>> factor(expr)
    x + y + x*y



- Pretty-Printing Exponential Expressions

    >>> from sympy import pprint
    >>> pprint(expr)
    (Expression with exponents superscripted and terms in order)



- Printing a Series

    Up to a number n, print the series:

      x + x**2 + x**3 + ... + x**n
          ----   ----         ----
            2      3            n


    from sympy import Symbol, pprint, init_printing

    def print_series(n):
        init_printing(order='rev-lex')
        x = Symbol('x')
        series = x
        for i in range(2, n+1):
            series = series + (x**i)/i
        pprint(series)



- Substituting in Values

    # Substituting values into variables
    >>> x = Symbol('x')
    >>> y = Symbol('y')
    >>> expr = x*x + x*y + x*y + y*y
    >>> result = expr.subs({x:1, y:2})
    >>> result
    9

    # Express symbol in terms of another symbol
    >>> from sympy import simplify
    >>> expr_subs = expr.subs({x:1-y})
    >>> expr_subs
    y**2 + 2*y*(-y+1) + (-y+1)**2

    >>> simplify(expr_subs)
    1



- Converting Strings to Mathematical Expressions

    >>> from sympy import sympify
    >>> expr = 'x**2 + 3*x + x**3 + 2*x'
    >>> expr = sympfiy(expr)



- Handling sympify() Errors

    >>> from sympy import sympify
    >>> from sympy.core.sympify import SympifyError
    >>> expr = 'x**2 + 3*x + x**3 + 2x'

    >>> try:
            expr = sympify(expr)
        except SympifyError:
            print('Invalid input')



- 