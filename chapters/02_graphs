-------------------------------------------------
CHAPTER 2 - VISUALIZING DATA WITH GRAPHS
-------------------------------------------------

- Simple matplotlib Example

    from pylab import plot, show

    x_numbers = [1, 2, 3]
    y_numbers = [4, 5, 6]

    plot(x_numbers, y_numbers)
    show()



- Plotting Options

    # Mark points inputted with circles
    # Marker options include: o * x +
    plot(x_numbers, y_numbers, marker='o')

    # Include markers but omit connecting line
    plot(x_numbers, y_numbers, 'o')

    

- Example - Average Temperatures in NYC (2000-12)

    nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]
    years = range(2000, 2013)
    plot(years, nyc_temp, marker='o')
    show()



- Graphs With Multiple Plots

    nyc_temp_2000 = [...monthly values...]
    nyc_temp_2006 = [...monthly values...]
    nyc_temp_2012 = [...monthly values...]
    months = range(1, 13)

    # Can plot all in same statement
    plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)

    # Or use separate plot statements
    plot(months, nyc_temp_2000)
    plot(months, nyc_temp_2006)
    plot(months, nyc_temp_2012)



- Add Legend to Graph

    from pylab import legend

    plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)
    legend([2000, 2006, 2012])
    show()



- Adding Titles and Labels

    from pylab import plot, show, title, xlabel, ylabel, legend

    plot(months, nyc_temp_2000, months, nyc_temp_2006, months, nyc_temp_2012)
    title('Average monthly temperature in NYC')
    xlabel('Month')
    ylabel('Temperature')
    legend([2000, 2006, 2012])
    show()



- Customizing the Axes

    # Calling axis() returns the range for the x-axis and y-axis
    from pylab import axis
    nyc_temp = [53.9, 56.3, 56.4, 53.4, 54.5, 55.8, 56.8, 55.0, 55.3, 54.0, 56.7, 56.4, 57.3]
    plot(nyc_temp, marker='o')

    axis()
    # Returns (0.0, 12.0, 53.0, 57.5)


    # Change range of axis
    # Parameters are: xmin xmax ymin ymax
    axis(ymin=0)



- pylab vs pyplot

    The 'pylab' module is useful for creating plots in the IDLE shell.  The 'pyplot' module is much 
      more efficient, and is usually used in real programs.



- pyplot Example

    import matplotlib.pyplot as plt

    def create_graph():
        x_numbers = [1, 2, 3]
        y_numbers = [4, 5, 6]
        plt.plot(x_numbers, y_numbers)
        plt.show()

    if __name__ == '__main__':
        create_graph()



- Saving a Plot

    from pylab import plot, savefig
    x = [1, 2, 3]
    y = [4, 5, 6]
    plot(x, y)
    savefig('mygraph.png')



- Example - Plotting Newton's Universal Law of Gravitation

    F = G(m1)(m2)
        ---------
          r**2

    G = universal gravitational constant = 6.674 * 10**-11 N m**2 
                                                           ------
                                                           kg**-2

    r = distance between bodies


    '''
    The relationship between gravitational force and distance between bodies.
    '''

    import matplotlib.pyplot as plt

    def draw_graph(x, y):
        plt.plot(x, y, marker='o')
        plt.xlabel('Distance in meters')
        plt.ylabel('Gravitational force in newtons')
        plt.title('Gravitational force and distance')
        plt.show()

    def generate_F_r():
        r = range(100, 1001, 50)
        F = []
        G = 6.674 * (10**-11)
        m1, m2 = 0.5, 1.5

        for dist in r:
            force = G * (m1 * m2) / (dist**2)
            F.append(force)

        draw_graph(r, F)

    if __name__ == '__main__':
        generate_F_r()