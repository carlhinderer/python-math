-------------------------------------------------
CHAPTER 3 - DESCRIPTIVE STATISTICS
-------------------------------------------------

- Finding the Mean

    def calculate_mean(numbers):
        return sum(numbers) / len(numbers)



- Finding the Median

    def calculate_median(numbers):
        N = len(numbers)
        numbers.sort()
        if N % 2 == 0:
            m1 = N // 2
            m2 = N // 2 - 1
            median = (numbers[m1] + numbers[m2]) / 2
        else:
            m = (N + 1) // 2
            median = numbers[m]
        return median



- Using a 'Counter' object to Find the Element Counts
    
    >>> from collections import Counter
    >>> simple_list = [4, 2, 1, 3, 4]

    >>> c = Counter(simple_list)
    >>> c.most_common()
    [(4, 2), (1, 1), (2, 1), (3, 1)]

    >>> c.most_common(1)
    [(4, 2)]



- Finding the Mode

    from collections import Counter

    def calculate_mode(numbers):
        c = Counter(numbers)
        mode = c.most_common(1)
        return mode[0][0]



- Finding All the Modes 

    from collections import Counter

    def calculate_mode(numbers):
        c = Counter(numbers)
        numbers_freq = c.most_common()
        max_count = numbers_freq[0][1]

        modes = []
        for num in numbers_freq:
            if num[1] == max_count:
                modes.append(num[0])
        return modes



- Creating a Frequency Table

    from collections import Counter

    # Sorted by frequency
    def frequency_table(numbers):
        table = Counter(numbers)
        print('Number\tFrequency')
        for number in table.most_common():
            print('{0}\t{1}'.format(number[o], number[1]))

    # Sorted by numbers
    def frequency_table(numbers):
        table = Counter(numbers)
        numbers_freq = table.most_common()
        numbers_freq.sort()

        print('Number\tFrequency')
        for number in numbers_freq:
            print('{0}\t{1}'.format(number[0], number[1]))



- Find the Range

    def find_range(numbers):
        return max(numbers) - min(numbers)



- Finding Variance and Standard Deviation

    # Find distances from the mean for each point
    def find_differences(numbers):
        mean = calculate_mean(numbers)
        return [num-mean for num in numbers]

    # Calculate variance
    def calculate_variance(numbers):
        diff = find_differences(numbers)
        squared_diff = [num**2 for num in diff]
        return sum(squared_diff) / len(numbers)

    # Calculate standard deviation
    def calculate_standard_deviation(numbers):
        return calculate_variance(numbers) ** 0.5



- Finding the Correlation Coefficient

    def find_correlation(x, y):
        n = len(x)

        prod = []
        for xi, yi in zip(x, y):
            prod.append(xi * yi)

        sum_x = sum(x)
        squared_sum_x = sum_x**2
        sum_y = sum(y)
        squared_sum_y = sum_y**2
        sum_prod = sum(prod)

        x_square = [xi**2 for xi in x]
        x_square_sum = sum(x_square)
        y_square = [yi**2 for yi in y]
        y_square_sum = sum(y_square)

        numerator = (n * sum_prod) - (sum_x * sum_y)
        denom_term_1 = (n * x_square_sum) - squared_sum_x
        denom_term_2 = (n * y_square_sum) - squared_sum_y
        denominator = (denom_term_1 * denom_term_2) ** 0.5
        return numerator / denominator



- The new 'statistics' standard library package (3.4+)

    import statistics

    numbers = [1, 2, 5, 7, 4, 9]
    statistics.mean(numbers)
    statistics.median(numbers)
    statistics.mode(numbers)

    statistics.pstdev(numbers)       # Population standard deviation of data.
    statistics.pvariance()           # Population variance of data.
    statistics.stdev()               # Sample standard deviation of data.
    statistics.variance()            # Sample variance of data.



- Creating Scatter Plots

    import matplotlib.pyplot as plt

    x = [1, 2, 3, 4]
    y = [2, 4, 6, 8]
    plt.scatter(x, y)
    plt.show()



- Example - Importing Data From CSV

    import csv
    import matplotlib.pyplot as plt

    def scatter_plot(x, y):
        plt.scatter(x, y)
        plt.xlabel('Number')
        plt.ylabel('Square')
        plt.show()

    def read_csv(filename):
        numbers = []
        squared = []
        with open(filename) as f:
            reader = csv.reader(f)
            next(reader)
            for row in reader:
                numbers.append(int(row[0]))
                squared.append(int(row[1]))
            return numbers, squared